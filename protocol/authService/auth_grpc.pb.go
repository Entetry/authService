// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: auth.proto

package authService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthGRPCService_ValidateTokens_FullMethodName = "/proto.AuthGRPCService/ValidateTokens"
	AuthGRPCService_GenerateTokens_FullMethodName = "/proto.AuthGRPCService/GenerateTokens"
	AuthGRPCService_RefreshTokens_FullMethodName  = "/proto.AuthGRPCService/RefreshTokens"
	AuthGRPCService_SignUp_FullMethodName         = "/proto.AuthGRPCService/SignUp"
	AuthGRPCService_SignIn_FullMethodName         = "/proto.AuthGRPCService/SignIn"
)

// AuthGRPCServiceClient is the client API for AuthGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthGRPCServiceClient interface {
	ValidateTokens(ctx context.Context, in *ValidateTokensRequest, opts ...grpc.CallOption) (*ValidateTokensResponse, error)
	GenerateTokens(ctx context.Context, in *GenerateTokensRequest, opts ...grpc.CallOption) (*GenerateTokensResponse, error)
	RefreshTokens(ctx context.Context, in *RefreshTokensRequest, opts ...grpc.CallOption) (*RefreshTokensResponse, error)
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
}

type authGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthGRPCServiceClient(cc grpc.ClientConnInterface) AuthGRPCServiceClient {
	return &authGRPCServiceClient{cc}
}

func (c *authGRPCServiceClient) ValidateTokens(ctx context.Context, in *ValidateTokensRequest, opts ...grpc.CallOption) (*ValidateTokensResponse, error) {
	out := new(ValidateTokensResponse)
	err := c.cc.Invoke(ctx, AuthGRPCService_ValidateTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGRPCServiceClient) GenerateTokens(ctx context.Context, in *GenerateTokensRequest, opts ...grpc.CallOption) (*GenerateTokensResponse, error) {
	out := new(GenerateTokensResponse)
	err := c.cc.Invoke(ctx, AuthGRPCService_GenerateTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGRPCServiceClient) RefreshTokens(ctx context.Context, in *RefreshTokensRequest, opts ...grpc.CallOption) (*RefreshTokensResponse, error) {
	out := new(RefreshTokensResponse)
	err := c.cc.Invoke(ctx, AuthGRPCService_RefreshTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGRPCServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, AuthGRPCService_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGRPCServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, AuthGRPCService_SignIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthGRPCServiceServer is the server API for AuthGRPCService service.
// All implementations must embed UnimplementedAuthGRPCServiceServer
// for forward compatibility
type AuthGRPCServiceServer interface {
	ValidateTokens(context.Context, *ValidateTokensRequest) (*ValidateTokensResponse, error)
	GenerateTokens(context.Context, *GenerateTokensRequest) (*GenerateTokensResponse, error)
	RefreshTokens(context.Context, *RefreshTokensRequest) (*RefreshTokensResponse, error)
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	mustEmbedUnimplementedAuthGRPCServiceServer()
}

// UnimplementedAuthGRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthGRPCServiceServer struct {
}

func (UnimplementedAuthGRPCServiceServer) ValidateTokens(context.Context, *ValidateTokensRequest) (*ValidateTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTokens not implemented")
}
func (UnimplementedAuthGRPCServiceServer) GenerateTokens(context.Context, *GenerateTokensRequest) (*GenerateTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTokens not implemented")
}
func (UnimplementedAuthGRPCServiceServer) RefreshTokens(context.Context, *RefreshTokensRequest) (*RefreshTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokens not implemented")
}
func (UnimplementedAuthGRPCServiceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAuthGRPCServiceServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedAuthGRPCServiceServer) mustEmbedUnimplementedAuthGRPCServiceServer() {}

// UnsafeAuthGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthGRPCServiceServer will
// result in compilation errors.
type UnsafeAuthGRPCServiceServer interface {
	mustEmbedUnimplementedAuthGRPCServiceServer()
}

func RegisterAuthGRPCServiceServer(s grpc.ServiceRegistrar, srv AuthGRPCServiceServer) {
	s.RegisterService(&AuthGRPCService_ServiceDesc, srv)
}

func _AuthGRPCService_ValidateTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGRPCServiceServer).ValidateTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGRPCService_ValidateTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGRPCServiceServer).ValidateTokens(ctx, req.(*ValidateTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGRPCService_GenerateTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGRPCServiceServer).GenerateTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGRPCService_GenerateTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGRPCServiceServer).GenerateTokens(ctx, req.(*GenerateTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGRPCService_RefreshTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGRPCServiceServer).RefreshTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGRPCService_RefreshTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGRPCServiceServer).RefreshTokens(ctx, req.(*RefreshTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGRPCService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGRPCServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGRPCService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGRPCServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGRPCService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGRPCServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGRPCService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGRPCServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthGRPCService_ServiceDesc is the grpc.ServiceDesc for AuthGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthGRPCService",
	HandlerType: (*AuthGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateTokens",
			Handler:    _AuthGRPCService_ValidateTokens_Handler,
		},
		{
			MethodName: "GenerateTokens",
			Handler:    _AuthGRPCService_GenerateTokens_Handler,
		},
		{
			MethodName: "RefreshTokens",
			Handler:    _AuthGRPCService_RefreshTokens_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _AuthGRPCService_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _AuthGRPCService_SignIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
